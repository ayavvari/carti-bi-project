"""
Analyze SG2 patient flow and Salesforce provider data.

This script performs the following steps:

1. Load CSV files generated by `data_generation.py`.
2. Aggregate patient metrics by provider and service line.
3. Aggregate overall metrics by provider and merge with Salesforce data.
4. Compute ROI metrics such as deals value per patient.
5. Fit a linear regression model to predict `deals_value` based on patient metrics.
6. Save the aggregated summary to `provider_summary.csv`.
7. (Optional) Persist data to a SQLite database for use by `api.py`.
"""

import pandas as pd
import sqlite3
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline


def load_data(patient_flow_path='sg2_patient_flow.csv', salesforce_path='salesforce_providers.csv'):
    pf = pd.read_csv(patient_flow_path, parse_dates=['admission_date', 'discharge_date'])
    sf = pd.read_csv(salesforce_path)
    return pf, sf


def aggregate_metrics(patient_flow: pd.DataFrame) -> pd.DataFrame:
    """Aggregate patient metrics by provider."""
    summary = patient_flow.groupby('referral_provider').agg(
        total_patients=('patient_id', 'count'),
        avg_length_of_stay=('length_of_stay', 'mean'),
        avg_satisfaction=('satisfaction_score', 'mean')
    ).reset_index()
    return summary


def merge_with_salesforce(summary: pd.DataFrame, salesforce: pd.DataFrame) -> pd.DataFrame:
    merged = summary.merge(salesforce, left_on='referral_provider', right_on='provider_name', how='left')
    merged['value_per_patient'] = merged['deals_value'] / merged['total_patients']
    return merged


def train_regression(df: pd.DataFrame) -> pd.DataFrame:
    """Fit a linear regression model to predict deals_value and add predictions to the DataFrame."""
    X = df[['total_patients', 'avg_length_of_stay', 'avg_satisfaction']]
    y = df['deals_value']
    model = make_pipeline(StandardScaler(), LinearRegression())
    model.fit(X, y)
    df['predicted_deals_value'] = model.predict(X)
    return df


def save_to_sqlite(patient_flow: pd.DataFrame, salesforce: pd.DataFrame, summary: pd.DataFrame, db_path='healthcare_bi.db'):
    """Persist datasets to a SQLite database for API consumption."""
    conn = sqlite3.connect(db_path)
    patient_flow.to_sql('patient_flow', conn, if_exists='replace', index=False)
    salesforce.to_sql('salesforce_providers', conn, if_exists='replace', index=False)
    summary.to_sql('provider_summary', conn, if_exists='replace', index=False)
    conn.close()


if __name__ == '__main__':
    # Load data
    patient_flow_df, salesforce_df = load_data()
    
    # Aggregate and merge
    provider_metrics = aggregate_metrics(patient_flow_df)
    merged_df = merge_with_salesforce(provider_metrics, salesforce_df)
    merged_df = train_regression(merged_df)
    
    # Save summary
    merged_df.to_csv('provider_summary.csv', index=False)
    
    # Persist to SQLite for API use
    save_to_sqlite(patient_flow_df, salesforce_df, merged_df)
    
    print('Analysis complete. Summary saved to provider_summary.csv and database healthcare_bi.db created.')