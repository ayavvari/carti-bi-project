using CsvHelper;
using CsvHelper.Configuration;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;
using System.Globalization;

var builder = WebApplication.CreateBuilder(args);

// Configure services if needed (e.g., add endpoints for controllers)
var app = builder.Build();

// Load provider summary into memory when the API starts. In a production system
// this could be replaced with a database or cache layer. Here we use a CSV file
// generated by the ETL script. If the file is not found, an empty list is used.
var providerData = new List<ProviderSummary>();
try
{
    using var reader = new StreamReader(Path.Combine(AppContext.BaseDirectory, "..", "provider_summary_full.csv"));
    using var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture)
    {
        HasHeaderRecord = true
    });
    providerData = csv.GetRecords<ProviderSummary>().ToList();
}
catch (Exception ex)
{
    Console.WriteLine($"Warning: could not load provider summary data: {ex.Message}");
}

// Define endpoints
app.MapGet("/providers", () => providerData);

app.MapGet("/providers/{name}", (string name) =>
{
    var provider = providerData.FirstOrDefault(p => string.Equals(p.ProviderName, name, StringComparison.OrdinalIgnoreCase));
    return provider is not null ? Results.Ok(provider) : Results.NotFound();
});

app.MapGet("/predictions/opportunity", (string provider) =>
{
    var record = providerData.FirstOrDefault(p => string.Equals(p.ProviderName, provider, StringComparison.OrdinalIgnoreCase));
    if (record is null)
    {
        return Results.NotFound();
    }
    return Results.Ok(new { provider = record.ProviderName, predictedOpportunityValue = record.PredictedOpportunityValue });
});

app.Run();

// Record class matching the provider summary CSV columns
public record ProviderSummary
{
    public string ProviderName { get; set; } = string.Empty;
    public int TotalPatients { get; set; }
    public double AvgLengthOfStay { get; set; }
    public double AvgSatisfaction { get; set; }
    public double AvgCost { get; set; }
    public int ContactCount { get; set; }
    public int DealsValue { get; set; }
    public int OpportunityValue { get; set; }
    public int MarketingCost { get; set; }
    public int TotalVisits { get; set; }
    public double TotalClaimAmount { get; set; }
    public double TotalClaimPaid { get; set; }
    public double DenialRate { get; set; }
    public double Roi { get; set; }
    public double ValuePerPatient { get; set; }
    public double ClaimCollectionRate { get; set; }
    public double PredictedOpportunityValue { get; set; }
}